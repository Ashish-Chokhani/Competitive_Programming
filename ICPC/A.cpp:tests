[
	{
		"test": "#include <bits/stdc++.h>\nusing namespace std;\n#define endl '\\n'\n#define f first\n#define s second\n#define getunique(v) {sort(v.begin(), v.end()); v.erase(unique(v.begin(), v.end()), v.end());}\n#define all(x) (x).begin(), (x).end()\n#define int long long int\ntypedef long double lld;\ntypedef unsigned long long ull;\nconst int mod = 1000000007; //998244353\nconst int INF = 1e18;\nusing ll = long long;\n// const lld pi = 3.14159265358979323846;\ntemplate <typename T>\nusing minHeap = priority_queue<T, vector<T>, greater<T>>;\ntemplate <typename T>\nusing maxHeap = priority_queue<T>;\n\n#ifndef ONLINE_JUDGE\n#define debug(x) cerr << #x << \"  \"; print(x); cerr << '\\n';\n#else\n#define debug(x)\n#endif\n\nclock_t startTime;\ndouble getCurrentTime() {\n    return (double)(clock() - startTime) / CLOCKS_PER_SEC;\n}\n\n#ifdef CLEVERFOX\n    #define eprintf(...) {fprintf(stderr, __VA_ARGS__);fflush(stderr);}\n#else\n    #define eprintf(...) 42\n#endif\n\n//Usage:\n//eprintf(\"--- Case #%d start ---\\n\", i);\n//printf(\"Case #%d: \", i);\n//solve();\n//eprintf(\"--- Case #%d end ---\\n\", i);\n//eprintf(\"time = %.5lf\\n\", getCurrentTime());\n//eprintf(\"++++++++++++++++++++\\n\");\n\nint seed = std::chrono::steady_clock::now().time_since_epoch().count();\nmt19937_64 rng(seed);\n// mt19937_64 rng(61378913);\n/* usage - just do rng() */\n\nstruct custom_hash {\n    static uint64_t splitmix64(uint64_t x) {\n        x += 0x9e3779b97f4a7c15;\n        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\n        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\n        return x ^ (x >> 31);\n    }\n\n    size_t operator()(uint64_t x) const {\n        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\n        return splitmix64(x + FIXED_RANDOM);\n    }\n};\n\n//Usage:\n//unordered_map<long long, int, custom_hash> safe_map;\n//gp_hash_table<long long, int, custom_hash> safe_hash_table;\n\n// #include <ext/pb_ds/assoc_container.hpp>\n// using namespace __gnu_pbds;\n// typedef tree<ll, null_type, less_equal<ll>, rb_tree_tag,\n//              tree_order_statistics_node_update>ordered_set;\n// using less_equals<K> makes lower_bound works as upper_bound and vice-versa\n// for set use less instead of less_equals\n// for erase use: st.erase(st.find_by_order(st.order_of_key(val));\n\nint gcd(int a, int b) {\n    if (a == 0)\n        return b;\n \n    return gcd(b % a, a);\n}\n\nint floor_div(int x, int y) {\n    assert(y != 0);\n    if (y < 0) {\n        y = -y;\n        x = -x;\n    }\n    if (x >= 0) return x / y;\n    return (x + 1) / y - 1;\n}\n\nint ceil_div(int x, int y) {\n    assert(y != 0);\n    if (y < 0) {\n        y = -y;\n        x = -x;\n    }\n    if (x <= 0) return x / y;\n    return (x - 1) / y + 1;\n}\n\nvoid solve(){\n    int N,K; cin>>N>>K;\n    vector<int>A(N);\n    vector<int>good;\n    for(int i=0;i<K;i++){\n        cin>>A[i]; \n        if((A[i]&K)==0) good.push_back(A[i]);\n    }\n    for(int i=0;i<31;i++){\n        if((K>>i) & 1) continue;\n        bool ok=false;\n        for(int x:good) if(!(x>>i & 1)) ok=true;\n        if(!ok){\n            cout<<\"NO\\n\"; return;\n        }\n    }\n    cout<<\"YES\\n\";\n    cout<<good.size()<<endl;\n    for(int x:good) cout<<x<<\" \";\n    cout<<endl;\n} \n\nint32_t main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    \n    #ifdef CLEVERFOX\n    auto begin = std::chrono::high_resolution_clock::now();\n    #endif\n    \n    #ifdef CLEVERFOX\n    freopen(\"input.txt\",\"r\",stdin);\n    freopen(\"output.txt\",\"w\",stdout);\n    freopen(\"error.txt\",\"w\",stderr);\n    #endif\n    \n    int t;\n    cin >> t;\n    while (t--)\n    {\n        solve();\n    }\n    \n    #ifdef CLEVERFOX\n    auto end = std::chrono::high_resolution_clock::now();\n    cerr << setprecision(4)<<fixed;\n    cerr << \"Execution time: \" << std::chrono::duration_cast<std::chrono::duration<double>>(end - begin).count() << \" seconds\" << endl;\n    #endif\n    return 0;\n}"
	}
]
